//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Gym/Gym.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Gym : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Gym()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Gym"",
    ""maps"": [
        {
            ""name"": ""GymActions"",
            ""id"": ""8a41c21a-e481-4b23-8fcd-a65ee1d1bc9a"",
            ""actions"": [
                {
                    ""name"": ""Lift"",
                    ""type"": ""Button"",
                    ""id"": ""c125d3b6-87fc-4145-9d5d-8f51faac597e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2d513460-6442-4f4d-8e8c-1d37fe4f1ff0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f8682ee-8beb-49c7-a7be-b87854087508"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GymActions
        m_GymActions = asset.FindActionMap("GymActions", throwIfNotFound: true);
        m_GymActions_Lift = m_GymActions.FindAction("Lift", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GymActions
    private readonly InputActionMap m_GymActions;
    private IGymActionsActions m_GymActionsActionsCallbackInterface;
    private readonly InputAction m_GymActions_Lift;
    public struct GymActionsActions
    {
        private @Gym m_Wrapper;
        public GymActionsActions(@Gym wrapper) { m_Wrapper = wrapper; }
        public InputAction @Lift => m_Wrapper.m_GymActions_Lift;
        public InputActionMap Get() { return m_Wrapper.m_GymActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GymActionsActions set) { return set.Get(); }
        public void SetCallbacks(IGymActionsActions instance)
        {
            if (m_Wrapper.m_GymActionsActionsCallbackInterface != null)
            {
                @Lift.started -= m_Wrapper.m_GymActionsActionsCallbackInterface.OnLift;
                @Lift.performed -= m_Wrapper.m_GymActionsActionsCallbackInterface.OnLift;
                @Lift.canceled -= m_Wrapper.m_GymActionsActionsCallbackInterface.OnLift;
            }
            m_Wrapper.m_GymActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Lift.started += instance.OnLift;
                @Lift.performed += instance.OnLift;
                @Lift.canceled += instance.OnLift;
            }
        }
    }
    public GymActionsActions @GymActions => new GymActionsActions(this);
    public interface IGymActionsActions
    {
        void OnLift(InputAction.CallbackContext context);
    }
}
